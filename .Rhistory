reticulate::repl_python()
import pandas as pd
import numpy as np
import statsmodels.api as sm
import statsmodels.formula.api as smf
from linearmodels.panel import PanelOLS
from statsmodels.stats.diagnostic import het_breuschpagan
from linearmodels.panel import compare
import patsy
# Load the data
df = pd.read_excel(".\\Data\\Crime_NorthCarolina.xlsx")
# Preview
print(df.head(3))
pip install pandas
pip
import pandas as pd
import numpy as np
import statsmodels.api as sm
import statsmodels.formula.api as smf
from linearmodels.panel import PanelOLS
from statsmodels.stats.diagnostic import het_breuschpagan
from linearmodels.panel import compare
import patsy
# Load the data
df = pd.read_excel(".\\Data\\Crime_NorthCarolina.xlsx")
# Preview
print(df.head(3))
quit
library(reticulate)
use_python("C:\\Program Files\\Python38\\python.exe", required = TRUE)
library(reticulate)
py_config()
use_python("C:/Program Files/Python38/python.exe", required = FALSE)
library(reticulate)
use_python("C:/Program Files/Python38/python.exe", required = TRUE)
library(reticulate)
use_python("C:/Program Files/Python38/python.exe", required = TRUE)
source("~/.active-rstudio-document", echo=TRUE)
library(reticulate)
use_python("C:/Program Files/Python38/python.exe", required = TRUE)
library(reticulate)
use_python("C:/Program Files/Python38/python.exe", required = TRUE)
py_config()
reticulate::repl_python()
import pandas as pd
import numpy as np
import statsmodels.api as sm
import statsmodels.formula.api as smf
from linearmodels.panel import PanelOLS
from statsmodels.stats.diagnostic import het_breuschpagan
from linearmodels.panel import compare
import patsy
# Load the data
df = pd.read_excel(".\\Data\\Crime_NorthCarolina.xlsx")
# Preview
print(df.head(3))
quit
library(lmtest)
library(readxl)
library(estimatr)
library(plm)
df <- read_excel(".\\Data\\Crime_NorthCarolina.xlsx")
head(df,n=3)
model <- lm_robust(log(crmrte) ~ log(prbarr) + log(prbconv) + prbpris, data = df)
summary(model)
# fixed effect model and random effect model using plm
library(plm)
fixed = plm(log(crmrte) ~ log(prbarr) + log(prbconv) + prbpris, data=df, index=c("county", "year"), model="within")
random = plm(log(crmrte) ~ log(prbarr) + log(prbconv) + prbpris, data=df, index=c("county", "year"), model="random")
# fixed effect model summary
summary(fixed)
install.packages("renv")
renv::init()
#| warning = FALSE, message = FALSE, results = "hide", echo = FALSE
library(reticulate)
use_python("C:/Program Files/Python38/python.exe", required = TRUE)
py_config()
reticulate::repl_python()
import pandas as pd
import numpy as np
import statsmodels.api as sm
import statsmodels.formula.api as smf
from linearmodels.panel import PanelOLS
from statsmodels.stats.diagnostic import het_breuschpagan
from linearmodels.panel import compare
import patsy
# Load the data
df = pd.read_excel(".\\Data\\Crime_NorthCarolina.xlsx")
# Preview
print(df.head(3))
quit
#| warning = FALSE, message = FALSE, results = "hide", echo = FALSE
library(reticulate)
use_python("C:/Program Files/Python38/python.exe", required = TRUE)
py_config()
reticulate::repl_python()
import pandas as pd
import numpy as np
import statsmodels.api as sm
import statsmodels.formula.api as smf
from linearmodels.panel import PanelOLS
from statsmodels.stats.diagnostic import het_breuschpagan
from linearmodels.panel import compare
import patsy
# Load the data
df = pd.read_excel(".\\Data\\Crime_NorthCarolina.xlsx")
# Preview
print(df.head(3))
quit
#| warning = FALSE
library(lmtest)
library(readxl)
library(estimatr)
library(plm)
df <- read_excel(".\\Data\\Crime_NorthCarolina.xlsx")
head(df,n=3)
reticulate::repl_python()
# Log-transform relevant variables
df['log_crmrte'] = np.log(df['crmrte'])
df['log_prbarr'] = np.log(df['prbarr'])
df['log_prbconv'] = np.log(df['prbconv'])
# Fit pooled OLS model with robust standard errors
model = smf.ols("log_crmrte ~ log_prbarr + log_prbconv + prbpris", data=df).fit(cov_type='HC1')
print(model.summary())
quit
model <- lm_robust(log(crmrte) ~ log(prbarr) + log(prbconv) + prbpris, data = df)
summary(model)
reticulate::repl_python()
# Breusch-Pagan test for heteroskedasticity
residuals = model.resid
exog = model.model.exog
bp_test = het_breuschpagan(residuals, exog)
print(f"Breusch-Pagan Test: LM stat={bp_test[0]}, p-value={bp_test[1]}")
quit
bptest(model)
reticulate::repl_python()
# Set index for panel data
df_panel = df.set_index(['county', 'year'])
# Create panel model variables
exog_vars = ['log_prbarr', 'log_prbconv', 'prbpris']
exog = sm.add_constant(df_panel[exog_vars])
y = df_panel['log_crmrte']
# Fixed effects model
fixed = PanelOLS(y, df_panel[exog_vars], entity_effects=True).fit()
print(fixed.summary)
# Random effects model
from linearmodels.panel import RandomEffects
random = RandomEffects(y, df_panel[exog_vars]).fit()
quit
# fixed effect model and random effect model using plm
library(plm)
fixed = plm(log(crmrte) ~ log(prbarr) + log(prbconv) + prbpris, data=df, index=c("county", "year"), model="within")
random = plm(log(crmrte) ~ log(prbarr) + log(prbconv) + prbpris, data=df, index=c("county", "year"), model="random")
# fixed effect model summary
summary(fixed)
reticulate::repl_python()
print(random.summary)
quit
summary(random)
reticulate::repl_python()
# Hausman test: compare fixed and random effects
from linearmodels.panel import compare
results = compare({'Fixed Effects': fixed, 'Random Effects': random})
print(results)
exit()
quit()
exit
exit
renv::init()
#| warning = FALSE, message = FALSE, results = "hide", echo = FALSE
renv::restore()
library(reticulate)
use_python("C:/Program Files/Python38/python.exe", required = TRUE)
py_config()
reticulate::repl_python()
pip install -r requirements.txt
quit
#| warning = FALSE, message = FALSE, results = "hide", echo = FALSE
renv::restore()
library(reticulate)
use_python("C:/Program Files/Python38/python.exe", required = TRUE)
py_config()
working_dir <- getwd()
#| warning = FALSE, message = FALSE, results = "hide", echo = FALSE
renv::restore()
library(reticulate)
use_python("C:/Program Files/Python38/python.exe", required = TRUE)
py_config()
working_dir <- getwd()
#| warning = FALSE, message = FALSE, results = "hide", echo = FALSE
renv::restore()
library(reticulate)
use_python("C:/Program Files/Python38/python.exe", required = TRUE)
py_config()
working_dir <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
install.packages("rstudioap")
install.packages("rstudioapi")
renv::snapshot()
renv::init()
#| warning = FALSE, message = FALSE, results = "hide", echo = FALSE
renv::restore()
library(reticulate)
use_python("C:/Program Files/Python38/python.exe", required = TRUE)
py_config()
working_dir <- getwd()
setwd(dirname(rstudioapi::getActiveDocumentContext()$path))
renv::snapshot()
reticulate::virtualenv_create("venv")
reticulate::virtualenv_install("venv", packages = c("pandas", "numpy", "statsmodels", "openpyxl", "linearmodels"))
#| warning = FALSE, message = FALSE, results = "hide", echo = FALSE
renv::restore()
library(reticulate)
use_python("C:/Program Files/Python38/python.exe", required = TRUE)
py_config()
reticulate::repl_python()
import pandas as pd
import numpy as np
import statsmodels.api as sm
import statsmodels.formula.api as smf
from linearmodels.panel import PanelOLS
from statsmodels.stats.diagnostic import het_breuschpagan
from linearmodels.panel import compare
import patsy
# Load the data
df = pd.read_excel(".\\Data\\Crime_NorthCarolina.xlsx")
# Preview
print(df.head(3))
import subprocess
import sys
subprocess.check_call([sys.executable, "-m", "pip", "install", "-r", "requirements.txt"])
import subprocess
import sys
# Install packages programmatically
subprocess.check_call([sys.executable, "-m", "pip", "install", "pandas", "numpy", "statsmodels", "openpyxl", "linearmodels"])
import subprocess, sys
# Safer subprocess call when stdout is not available (e.g. in reticulate)
subprocess.run(
[sys.executable, "-m", "pip", "install", "pandas", "numpy", "statsmodels", "openpyxl", "linearmodels"],
stdout=subprocess.PIPE,
stderr=subprocess.PIPE
)
import subprocess, sys
subprocess.run(
[sys.executable, "-m", "pip", "install", "pandas", "numpy", "statsmodels", "openpyxl", "linearmodels"],
stdout=subprocess.PIPE,
stderr=subprocess.PIPE
)
print(result.stdout)
print(result.stderr)
import subprocess, sys
result = subprocess.run(
[sys.executable, "-m", "pip", "install", "pandas", "numpy", "statsmodels", "openpyxl", "linearmodels"],
capture_output=True,
text=True  # this makes stdout and stderr strings instead of bytes
)
print(result.stdout)
print(result.stderr)
quit
#| warning = FALSE, message = FALSE, results = "hide", echo = FALSE
renv::restore()
library(reticulate)
use_python(Sys.which("python"), required = TRUE)
py_config()
reticulate::repl_python()
reticulate::repl_python()
#| warning = FALSE, message = FALSE, results = "hide", echo = FALSE
import subprocess, sys
result = subprocess.run(
[sys.executable, "-m", "pip", "install", "pandas", "numpy", "statsmodels", "openpyxl", "linearmodels"],
capture_output=True,
text=True
)
print(result.stdout)
print(result.stderr)
import pandas as pd
import numpy as np
import statsmodels.api as sm
import statsmodels.formula.api as smf
from linearmodels.panel import PanelOLS
from statsmodels.stats.diagnostic import het_breuschpagan
from linearmodels.panel import compare
import patsy
# Load the data
df = pd.read_excel(".\\Data\\Crime_NorthCarolina.xlsx")
# Preview
print(df.head(3))
import pandas as pd
import numpy as np
import statsmodels.api as sm
import statsmodels.formula.api as smf
from linearmodels.panel import PanelOLS
from statsmodels.stats.diagnostic import het_breuschpagan
from linearmodels.panel import compare
import patsy
# Load the data
df = pd.read_excel("Data/Crime_NorthCarolina.xlsx")
# Preview
print(df.head(3))
quit
quit
#| warning = FALSE
library(lmtest)
library(readxl)
library(estimatr)
library(plm)
df <- read_excel("Data/Crime_NorthCarolina.xlsx")
head(df,n=3)
reticulate::repl_python()
#| warning: FALSE, message: FALSE, results: "hide", echo: FALSE
import subprocess, sys
result = subprocess.run(
[sys.executable, "-m", "pip", "install", "pandas", "numpy", "statsmodels", "openpyxl", "linearmodels"],
capture_output=True,
text=True
)
print(result.stdout)
print(result.stderr)
